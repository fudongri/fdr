<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[jvisualvm远程连接tomcat]]></title>
    <url>%2F2017%2Fjvisualvm%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5tomcat%2F</url>
    <content type="text"><![CDATA[方法1：JMX连接 在tomcat的catalina.sh文件中加入12JAVA_OPTS="-Dcom.sun.management.jmxremote.port=7070 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=192.168.1.101" 说明： -Dcom.sun.management.jmxremote.port 远程连接端口 -Dcom.sun.management.jmxremote.ssl=false 是否启用ssl -Dcom.sun.management.jmxremote.authenticate=false 是否需要用户名密码认证 -Djava.rmi.server.hostname 服务器的ip 开放端口这里有个坑，不仅需要开放配置的远程的连接的端口，JMXserver还会监听几个随机端口。。不废话，看操作netstat -tupln | grep 7070 1tcp 0 0 :::7070 :::* LISTEN 3110/java lsof -i | grep 3110 123456java 3110 root 19u IPv6 37695 0t0 TCP *:60865 (LISTEN)java 3110 root 20u IPv6 37696 0t0 TCP *:arcp (LISTEN)java 3110 root 22u IPv6 37703 0t0 TCP *:57146 (LISTEN)java 3110 root 52u IPv6 37704 0t0 TCP *:webcache (LISTEN)java 3110 root 56u IPv6 37706 0t0 TCP *:8009 (LISTEN)java 3110 root 78u IPv6 37717 0t0 TCP localhost:mxi (LISTEN) 我们需要把这些端口在防火墙中全部开放，然而每次重启tomcat这些端口又全变了，所以没有影响的情况下可以直接关闭防火墙。 客户端连接最后就可以在我们本地JAVA HOME的bin目录打开jvisualvm.exe选择文件--&gt;添加JMX连接，输入ip端口连接就行了 方法2：jstatd连接先睡觉。。。]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>jvisualVM</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS6.x mysql5.7实现主从同步]]></title>
    <url>%2F2017%2FCentOS6.x%20%20mysql5.7%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[1.环境准备 一台Master服务器 192.168.1.101 一台Slave服务器（多个从节点同理） 192.168.1.102 Mysql官方文档 2.配置Master 开启二进制日志，配置server_idvim /etc/my.cnf在[mysqld]下增加如下配置，并重启myql服务，重启完成之后，我们可以通过show variables like &#39;%log_bin%&#39;;查看二进制日志的ON/OFF状态 12log-bin=mysqlbin-logserver_id=101 #server_id唯一即可，一般取ip尾号 连接mysql，创建slave用户，授予replication slave权限即可grant replication slave on *.* to &#39;relica&#39;@&#39;192.168.1.%&#39; identified by &#39;123456&#39;; 查看当前正在使用的二进制日志show master status\G;我这里得到：File: mysql-bin.000002Position: 154Binlog_Do_DB:Binlog_Ignore_DB:Executed_Gtid_Set: 3.配置Slave 配置server_idvim /etc/my.cnf在[mysqld]下增加如下配置，并重启myql服务 12#如果slave下面还有slave，这里也可以设置log-binserver_id=102 连接mysql，设置slave参数，并start slavechange master to master_host=&#39;192.168.1.101&#39;,master_user=&#39;relica&#39;,master_password=&#39;123456&#39;,master_log_file=&#39;mysql-bin.000002&#39;, master_log_pos=154;start slave; 查看Slave状态show slave status \G;如果看到Slave_IO_Running: Yes以及Slave_SQL_Running: Yes说明slave已经开始跑了。 注意事项： 如果需要重新修改slave的参数，需要先执行stop slave; 因为我是通过克隆虚拟机跑的mysql，Slave_IO_Running一直为NO,通过show slave status分析得知是因为两台机器mysql安装目录下auto.cnf中的server-uuid相同导致，因此只需要在其中一台服务器的mysql安装目录执行mv auto.cnf auto.cnf.bak再重启mysql即可，它会自动生成新的uuid。 也正是因为我的mysql是本地通过虚拟机克隆产生的，所以不需要考虑将Master的数据和Slave的数据保持一致的问题，而这一步在实际环境中很重要。 4.测试比如，在Mater中执行123456789create database test;use test;CREATE TABLE `user` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(50) NOT NULL, `age` tinyint(3) unsigned NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;INSERT INTO user(name,age) VALUES('a',20); 可以发现，Slave中数据已经进行了同步。]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS6.x yum安装mysql5.7]]></title>
    <url>%2F2017%2FCentOS6.x%20yum%E5%AE%89%E8%A3%85mysql5.7%2F</url>
    <content type="text"><![CDATA[1.安装yum源 下载yum源的rpm包 wget --no-check-certificate https://dev.mysql.com/get/mysql57-community-release-el6-11.noarch.rpm 安装rpm包 yum localinstall -y mysql57-community-release-el6-11.noarch.rpm 2.安装mysql 安装mysqlyum install -y mysql-community-server 开启mysql服务service mysqld start 查看mysql生成的临时登录密码grep &#39;temporary password&#39; /var/log/mysqld.log 使用临时密码登录mysql -uroot -p 修改root’@’localhost的登录密码ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;; 3.开启远程连接 开放3306端口，重启iptablesvi /etc/sysconfig/iptablesservice iptables restart 本地连接mysql将mysql.user表中root用户的host值改为“%”use mysql;update user set host=&#39;%&#39; where user=&#39;root&#39;;flush privileges; 说明：mysql.user表中host列指定了允许用户登录所使用的IP，%是通配符。 user=’root’&amp;host=’192.168.1.1’，表示root用户只能通过IP地址为192.168.1.1的客户端连接mysql。 user=’root’&amp;host=’192.168.1.%’，表示root用户可以通过IP地址以192.168.1.开头的客户端连接mysql。 user=’root’&amp;host=’%’，表示所有IP都有连接权限。因此在开启远程连接时，为了省事可以把host更新为%。]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
</search>
